package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
   
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing cannot continue", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" (line ").append(((Symbol)info).left).append(")");
        else if (info instanceof Integer) {
			msg.append (" (line ").append((int)info).append(")");
		}
        log.error(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROGRAM, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN;
terminal VOID, EXTENDS, CONTINUE, FOR, STATIC, NAMESPACE;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL, NOT_EQUAL, GREATER_THAN, GREATER_EQUAL, LESS_THAN, LESS_EQUAL;
terminal AND, OR, ASSIGN, INC, DEC, SEMI, DOUBLE_COLON, COMMA, DOT, LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;

terminal Integer NUMCONST;
terminal Boolean BOOLCONST;
terminal Character CHARCONST;
terminal String IDENT;

nonterminal Namespaces, GlobalDecls, GlobalDecl, ConstDecl, ConstDecls, ConstDeclSingle, VarDecl, VarDecls, VarDeclSingle, LocalVarDecls;
nonterminal MethodDecls, ReturnType, FormPars, FormParsList, Statements, Statement, PrintExtraArgs, DesignStatements, DesignStatementsList, DesignStatement, Designs;
nonterminal ActPars, ActParsList, Relops, Addops, Mulops, ElseStatement;
nonterminal ClassDecl, Extends, ClassMethodDecls, StaticVarDecl, StaticInitializer, StaticInitializers, StaticThings;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, ConstValue, NamespaceName, MethName, MethodDecl, Design;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, VarArr, Expr, Term, Factor, Condition, CondTerm, CondFact;

precedence left ELSE;

Program 	::= 
			(Program) ProgName Namespaces GlobalDecls LBRACE MethodDecls RBRACE;

ProgName 	::= 
			(ProgName) PROGRAM IDENT:progName;

Namespaces 	::= 
			(ANamespace) Namespaces NamespaceName LBRACE GlobalDecls LBRACE MethodDecls RBRACE RBRACE
			| (NoNamespace) /* epsilon */;
			
NamespaceName ::= 
			(NamespaceName) NAMESPACE IDENT:namespaceName;
			
GlobalDecls ::= 
			(GlobDecls) GlobalDecls GlobalDecl
			| (NoGlobDecls) /* epsilon */;

GlobalDecl 	::= 
			(GlobDeclConst) ConstDecl 
			| (GlobDeclVar) VarDecl
			| (GlobDeclClass) ClassDecl;

ConstDecl 	::= 
			(ConstDecl) CONST Type ConstDecls SEMI;

ConstDeclSingle ::= 
			(SingleConstDecl) IDENT:name ASSIGN ConstValue;

ConstDecls 	::= 
			(ListConstDecls) ConstDeclSingle COMMA ConstDecls
			| (ErrListConstDecls) error:l
			{: parser.report_error("Error during const declaration, recovery to comma(,) ", lleft); :} 
			COMMA ConstDecls
			| (SingleConstDecls) ConstDeclSingle
			| (ErrSingleConstDecls) error:l
			{: parser.report_error("Error during const declaration, recovery to semicolon(;) ", lleft); :};
			
ConstValue 	::= 
			(NumConst) NUMCONST : numConst
			| (CharConst) CHARCONST : charConst
			| (BoolConst) BOOLCONST : boolConst;

VarDecl 	::= 
			(VarDeclaration) Type VarDecls SEMI
			| (ErrLocVarDecl) error:l
			{: parser.report_error("Error during local var or class fields declaration, recovery to left brace({) ", lleft); :};
			
VarDeclSingle::= 
			(SingleVarDecl) IDENT:name VarArr;

VarDecls	::= 
			(ListVarDecls) VarDeclSingle COMMA VarDecls
			| (SingleVarDecls) VarDeclSingle
			| (ErrListVarDecls) error:l
			{: parser.report_error("Error during var declaration, recovery to comma(,) ", lleft); :}
			 COMMA VarDecls
			| (ErrSingleVarDecls) error:l
			{: parser.report_error("Error during var declaration, recovery to semicolon(;) ", lleft); :};

VarArr		::= 
			(ArrVar) LBRACKET RBRACKET
			| (NotArrVar) /* epsilon */;

ClassDecl	::= 
			(ClassDecl) CLASS IDENT Extends LBRACE StaticThings LocalVarDecls ClassMethodDecls RBRACE;

Extends		::= 
			(ClassExtends) EXTENDS Type
			| (ErrClassExtends) error:l
			{: parser.report_error("Error during class extends declaration, recovery to left brace({) ", lleft); :}
			| (NoClassExtends) /* epsilon */;

ClassMethodDecls ::= 
			(ClassMethDecls) LBRACE MethodDecls RBRACE
			| (NoClassMethDecls) /* epsilon */;

StaticThings ::= 
			(StaticVarThings) StaticVarDecl StaticThings
            |   (StaticInitThings) StaticInitializer StaticInitializers
			| 	(NoStaticThings) /* epsilon */;

StaticVarDecl ::= 
			(StaticVarDecl) STATIC VarDecl;

StaticInitializers ::= 
			(StaticInits) StaticInitializer StaticInitializers
			| (NoStaticInits) /* epsilon */;

StaticInitializer ::= 
			(StaticInit) STATIC LBRACE Statements RBRACE;

MethodDecls ::= 
			(MethDecls) MethodDecls MethodDecl
			| (NoMethDecls) /* epsilon */;
			
MethodDecl	::=
			(MethDecl) ReturnType MethName LPAREN FormPars RPAREN LocalVarDecls LBRACE Statements RBRACE
			| (ErrMethDeclPars) ReturnType MethName LPAREN error RPAREN:l 
			{: parser.report_error("Error during formal parameters declaration, recovery to right parenthesis(')') ", lleft); :}
			LocalVarDecls LBRACE Statements RBRACE;

			
MethName	::=
			(MethName) IDENT:methName;
			
ReturnType 	::=
			(ReturnTypeType) Type 
			| (ReturnTypeVoid) VOID;
			
LocalVarDecls ::= 
			(LocVarDecls) LocalVarDecls VarDecl  
			| (NoLocVarDecls) /* epsilon */;

FormPars	::=
			(FormParams) FormParsList
			| (NoFormParams) /* epsilon */;

FormParsList ::= 
			(FirstFormParams) Type IDENT:name VarArr
			| (ListFormParams) FormParsList COMMA Type IDENT:name VarArr
			| (ErrFormParams) error COMMA:l
			{: parser.report_error("Error during formal parameters declaration, recovery to comma(,) ", lleft); :};

Type 		::= 
			(TypeSimple) IDENT:typeName
			| (TypeSpecific) IDENT:namespaceName DOUBLE_COLON IDENT:typeName;

Statements 	::= 
			(Stmnts) Statements Statement
			| (NoStmnts) /* epsilon */;  
			
Statement 	::= 
			(StmntDesign) DesignStatement SEMI
			| (StmntIfElse) IF LPAREN Condition RPAREN Statement ElseStatement
			| (ErrStmntIf) IF LPAREN error RPAREN:l
			{: parser.report_error("Error during if logic conditions declaration, recovery to right parenthesis(')') ", lleft); :}
			Statement ElseStatement
			| (StmntBreak) BREAK SEMI
			| (StmntContinue) CONTINUE SEMI
			| (StmntRetExpr) RETURN Expr SEMI
			| (StmntRetVoid) RETURN SEMI
			| (StmntRead) READ LPAREN Design RPAREN SEMI
			| (StmntPrint) PRINT LPAREN Expr PrintExtraArgs RPAREN SEMI
			| (StmntForCond) FOR LPAREN DesignStatements SEMI CondFact SEMI DesignStatements RPAREN Statement
			| (StmntForNoCond) FOR LPAREN DesignStatements SEMI SEMI DesignStatements RPAREN Statement
			| (StmntBlock) LBRACE Statements RBRACE;
			
PrintExtraArgs ::=
			(PrintExtraArg) COMMA NUMCONST
			| (NoPrintExtraArgs) /* epsilon */;

ElseStatement ::= 
			(StmntElse) ELSE Statement
			| (StmntNoElse) /* epsilon */;
			
DesignStatements ::=
			(DesignStmnts) DesignStatementsList
			| (NoDesignStmnts) /* epsilon */;
			
DesignStatementsList ::= 
			(SingleDesignStmnts) DesignStatement
			| (ListDesignStmnts) DesignStatementsList COMMA DesignStatement;

DesignStatement ::= 
			(DesignAssignment) Design ASSIGN Expr
			| (DesignMethCall) Design LPAREN ActPars RPAREN
			| (DesignInc) Design INC
			| (DesignDec) Design DEC
			| (DesignMultiAssignment) LBRACKET Designs MUL Design RBRACKET ASSIGN Design
			| (ErrDesign) error SEMI:l
			{: parser.report_error("Error during assignment construction, recovery to semicolon(;) ", lleft); :};

Designs 	::= 
			(DesignsListNoDesign) Designs COMMA
			| (DesignsListFirstDesign) Design
			| (DesignsListDesign) Designs COMMA Design
			| (NoDesignsList) /* epsilon */;
	
ActPars		::=
			(ActParams) ActParsList
			| (NoActParams) /* epsilon */;
			
ActParsList	::= 
			(FirstActPars) Expr
			| (ListActPars) ActParsList COMMA Expr;

Condition 	::= 
			(NoCondOr) CondTerm
			| (CondOr) Condition OR CondTerm;
			
CondTerm 	::= 
			(NoCondAnd) CondFact
			| (CondAnd) CondTerm AND CondFact;
			
CondFact 	::= 
			(CondRelops) Expr Relops Expr
			| (NoCondRelops) Expr;

Expr 		::= 
			(NoAddopsExprNeg) MINUS Term
			| (NoAddopsExpr) Term
			| (AddopsExpr) Expr Addops Term;
			
Term 		::= 
			(NoMulopsTerm) Factor
			| (MulopsTerm) Term Mulops Factor;
			
Factor 		::= 
			(FactorDesignFCall) Design LPAREN ActPars RPAREN
			| (FactorDesign) Design
			| (FactorConst) ConstValue
			| (FactorNewArrRef) NEW Type LBRACKET Expr RBRACKET
			| (FactorNewObjRef) NEW Type LPAREN ActPars RPAREN
			| (FactorExpr) LPAREN Expr RPAREN;

Design 		::= (DesignIdentNamespace) IDENT:namespaceName DOUBLE_COLON IDENT:varName
	 		| (DesignIdent) IDENT:varName
			| (DesignArrayAccess) Design LBRACKET Expr RBRACKET
			| (DesignFieldAccess) Design DOT IDENT;

			
Relops 		::= (EqualOp) EQUAL
			| (NotEqualOp) NOT_EQUAL
			| (GreaterOp) GREATER_THAN
			| (GreaterEqualOp) GREATER_EQUAL
			| (LessOp) LESS_THAN
			| (LessEqualOp) LESS_EQUAL;
			
Addops 		::= (AddOp) PLUS
			| (SubOp) MINUS;
			
Mulops 		::= (MulOp) MUL
			| (DivOp) DIV
			| (ModOp) MOD;